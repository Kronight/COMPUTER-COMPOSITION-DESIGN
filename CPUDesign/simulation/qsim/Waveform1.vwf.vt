// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2020 21:38:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU_MD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_MD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU_B;
reg [7:0] IN;
reg LD_R0;
reg LDDR1;
reg LDDR2;
reg [24:19] M;
reg [7:0] RAM;
reg RAM_B;
reg ROC;
reg SW_B;
reg T2;
// wires                                               
wire [7:0] ALU;
wire [7:0] BUS;
wire [7:0] DR1;
wire [7:0] DR2;
wire FC;
wire FZ;
wire [7:0] R0;

// assign statements (if any)                          
ALU_MD i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.ALU_B(ALU_B),
	.BUS(BUS),
	.DR1(DR1),
	.DR2(DR2),
	.FC(FC),
	.FZ(FZ),
	.IN(IN),
	.LD_R0(LD_R0),
	.LDDR1(LDDR1),
	.LDDR2(LDDR2),
	.M(M),
	.R0(R0),
	.RAM(RAM),
	.RAM_B(RAM_B),
	.ROC(ROC),
	.SW_B(SW_B),
	.T2(T2)
);
initial 
begin 
#1000000 $finish;
end 

// ALU_B
initial
begin
	ALU_B = 1'b0;
	ALU_B = #55000 1'b1;
	ALU_B = #5000 1'b0;
	ALU_B = #20000 1'b1;
	ALU_B = #10000 1'b0;
end 
// RAM[ 7 ]
initial
begin
	RAM[7] = 1'b1;
	RAM[7] = #30000 1'b0;
end 
// RAM[ 6 ]
initial
begin
	RAM[6] = 1'b1;
	RAM[6] = #30000 1'b0;
end 
// RAM[ 5 ]
initial
begin
	RAM[5] = 1'b0;
end 
// RAM[ 4 ]
initial
begin
	RAM[4] = 1'b1;
	RAM[4] = #30000 1'b0;
end 
// RAM[ 3 ]
initial
begin
	RAM[3] = 1'b0;
end 
// RAM[ 2 ]
initial
begin
	RAM[2] = 1'b1;
	RAM[2] = #30000 1'b0;
end 
// RAM[ 1 ]
initial
begin
	RAM[1] = 1'b0;
end 
// RAM[ 0 ]
initial
begin
	RAM[0] = 1'b1;
	RAM[0] = #30000 1'b0;
end 

// RAM_B
initial
begin
	RAM_B = 1'b0;
	RAM_B = #10000 1'b1;
	RAM_B = #10000 1'b0;
end 

// LDDR1
initial
begin
	LDDR1 = 1'b0;
	LDDR1 = #30000 1'b1;
	LDDR1 = #5000 1'b0;
	LDDR1 = #5000 1'b1;
	LDDR1 = #5000 1'b0;
	LDDR1 = #55000 1'b1;
	LDDR1 = #10000 1'b0;
	LDDR1 = #10000 1'b1;
	LDDR1 = #10000 1'b0;
end 

// LDDR2
initial
begin
	LDDR2 = 1'b0;
	LDDR2 = #10000 1'b1;
	LDDR2 = #5000 1'b0;
	LDDR2 = #105000 1'b1;
	LDDR2 = #10000 1'b0;
end 

// ROC
initial
begin
	ROC = 1'b0;
	ROC = #40000 1'b1;
	ROC = #10000 1'b0;
	ROC = #40000 1'b1;
	ROC = #10000 1'b0;
	ROC = #10000 1'b1;
	ROC = #10000 1'b0;
	ROC = #30000 1'b1;
	ROC = #10000 1'b0;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b0;
	IN[6] = #10000 1'b1;
	IN[6] = #100000 1'b0;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b0;
	IN[5] = #50000 1'b1;
	IN[5] = #60000 1'b0;
end 
// IN[ 4 ]
initial
begin
	IN[4] = 1'b0;
	IN[4] = #10000 1'b1;
	IN[4] = #100000 1'b0;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b0;
	IN[2] = #10000 1'b1;
	IN[2] = #100000 1'b0;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b0;
	IN[1] = #10000 1'b1;
	IN[1] = #100000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b0;
	IN[0] = #50000 1'b1;
	IN[0] = #60000 1'b0;
end 

// SW_B
initial
begin
	SW_B = 1'b0;
	SW_B = #30000 1'b1;
	SW_B = #10000 1'b0;
end 

// LD_R0
initial
begin
	LD_R0 = 1'b0;
	LD_R0 = #30000 1'b1;
	LD_R0 = #5000 1'b0;
	LD_R0 = #20000 1'b1;
	LD_R0 = #5000 1'b0;
	LD_R0 = #25000 1'b1;
	LD_R0 = #5000 1'b0;
	LD_R0 = #30000 1'b1;
	LD_R0 = #10000 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
	T2 = #10000 1'b1;
	T2 = #2500 1'b0;
	T2 = #2500 1'b1;
	T2 = #2500 1'b0;
	T2 = #12500 1'b1;
	T2 = #5000 1'b0;
	T2 = #5000 1'b1;
	T2 = #5000 1'b0;
	T2 = #10000 1'b1;
	T2 = #5000 1'b0;
	T2 = #25000 1'b1;
	T2 = #5000 1'b0;
	T2 = #10000 1'b1;
	T2 = #10000 1'b0;
	T2 = #10000 1'b1;
	T2 = #10000 1'b0;
	T2 = #20000 1'b1;
	T2 = #10000 1'b0;
end 

// M[24]
initial
begin
	M[24] = 1'b0;
	M[24] = #70000 1'b1;
	M[24] = #20000 1'b0;
end 

// M[23]
initial
begin
	M[23] = 1'b0;
end 

// M[22]
initial
begin
	M[22] = 1'b0;
end 

// M[21]
initial
begin
	M[21] = 1'b0;
	M[21] = #70000 1'b1;
	M[21] = #20000 1'b0;
end 

// M[20]
initial
begin
	M[20] = 1'b0;
end 

// M[19]
initial
begin
	M[19] = 1'b0;
end 
endmodule

