// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2020 19:19:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uPC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uPC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] IR;
reg RST;
reg SWA;
reg SWB;
reg T1;
reg T2;
// wires                                               
wire [24:1] M;
wire [5:0] uA;

// assign statements (if any)                          
uPC i1 (
// port map - connection between master ports and signals/registers   
	.IR(IR),
	.M(M),
	.RST(RST),
	.SWA(SWA),
	.SWB(SWB),
	.T1(T1),
	.T2(T2),
	.uA(uA)
);
initial 
begin 
#1000000 $finish;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
	IR[7] = #120000 1'b1;
	IR[7] = #300000 1'b0;
	IR[7] = #60000 1'b1;
	IR[7] = #240000 1'b0;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b0;
	IR[6] = #360000 1'b1;
	IR[6] = #60000 1'b0;
	IR[6] = #570000 1'b1;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
	IR[5] = #240000 1'b1;
	IR[5] = #120000 1'b0;
	IR[5] = #240000 1'b1;
	IR[5] = #120000 1'b0;
	IR[5] = #270000 1'b1;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b0;
	IR[4] = #180000 1'b1;
	IR[4] = #60000 1'b0;
	IR[4] = #60000 1'b1;
	IR[4] = #60000 1'b0;
	IR[4] = #180000 1'b1;
	IR[4] = #60000 1'b0;
	IR[4] = #60000 1'b1;
	IR[4] = #60000 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b0;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #50000 1'b1;
	RST = #20000 1'b0;
end 

// SWA
initial
begin
	SWA = 1'b0;
	SWA = #60000 1'b1;
	SWA = #660000 1'b0;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #60000 1'b1;
	SWB = #660000 1'b0;
end 

// T1
initial
begin
	T1 = 1'b0;
	T1 = #60000 1'b1;
	T1 = #10000 1'b0;
	T1 = #74000 1'b1;
	# 6000;
	repeat(14)
	begin
		T1 = 1'b0;
		T1 = #54000 1'b1;
		# 6000;
	end
	T1 = 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
	T2 = #70000 1'b1;
	T2 = #10000 1'b0;
	T2 = #84000 1'b1;
	# 6000;
	repeat(13)
	begin
		T2 = 1'b0;
		T2 = #54000 1'b1;
		# 6000;
	end
	T2 = 1'b0;
end 
endmodule

